/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        HMR: HMR {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <2 1 0 12 24 13 25 14 26 15 27 3 4 5 15 16 17 27 28 29 36 37 38 39 40 41>;
        };

        HML: HML {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <35 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 41 40 38 37 36>;
            hold-trigger-on-release;
        };

        BT_0: BT_0 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT_0";
            bindings = <&bt BT_SEL 0>, <&bt BT_DISC 0>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        BT_1: BT_1 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT_1";
            bindings = <&bt BT_SEL 1>, <&bt BT_DISC 1>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        BT_2: BT_2 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT_2";
            bindings = <&bt BT_SEL 2>, <&bt BT_DISC 2>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        BT_3: BT_3 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT_3";
            bindings = <&bt BT_SEL 3>, <&bt BT_DISC 3>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        BT_4: BT_4 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT_4";
            bindings = <&bt BT_SEL 4>, <&bt BT_DISC 4>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Colemak_BaseLayer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            display-name = "Base";
            bindings = <
&none      &kp Q        &kp W        &kp F         &kp P         &kp B        &kp J      &kp L         &kp U         &kp Y        &kp SQT      &none
&kp LCTRL  &HML LGUI A  &HML LALT R  &HML LCTRL S  &HML LSHFT T  &kp G        &kp M      &HMR RSHFT N  &HMR RCTRL E  &HMR RALT I  &HMR RGUI O  &none
&none      &kp Z        &kp X        &kp C         &kp D         &kp V        &kp K      &kp H         &kp COMMA     &kp DOT      &kp FSLH     &none
                                     &lt 6 ESC     &lt 5 SPACE   &lt 7 TAB    &lt 2 RET  &lt 3 BSPC    &lt 4 DEL
            >;
        };

        QWERTY_BaseLayer {
            display-name = "Base";
            bindings = <
&none      &kp Q        &kp W        &kp E         &kp R         &kp T        &kp Y      &kp U         &kp I         &kp O        &kp P                &none
&kp LCTRL  &HML LGUI A  &HML LALT S  &HML LCTRL D  &HML LSHFT F  &kp G        &kp H      &HML RSHFT J  &HML LCTRL K  &HML LALT L  &HML RGUI SEMICOLON  &none
&none      &kp Z        &kp X        &kp C         &kp V         &kp B        &kp N      &kp M         &kp COMMA     &kp DOT      &kp FSLH             &none
                                     &lt 6 ESC     &lt 5 SPACE   &lt 7 TAB    &lt 2 RET  &lt 3 BSPC    &lt 4 DEL
            >;
        };

        Sym {
            display-name = "Lower";
            bindings = <
&trans  &kp LEFT_BRACE  &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_BRACE    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp COLON       &kp DLLR       &kp PRCNT     &kp CARET             &kp PLUS           &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kt TILDE       &kp EXCL       &kp AT        &kp HASH              &kp PIPE           &trans  &trans  &trans  &trans  &trans  &trans
                                       &kp LPAR      &kp RPAR              &kp UNDERSCORE     &trans  &trans  &trans
            >;
        };

        Num {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            display-name = "Lower";
            bindings = <
&trans  &kp LEFT_BRACKET  &kp N7  &kp N8   &kp N9  &kp RIGHT_BRACKET    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp SEMI          &kp N4  &kp N5   &kp N6  &kp EQUAL            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp GRAVE         &kp N1  &kp N2   &kp N3  &kp BSLH             &trans  &trans  &trans  &trans  &trans  &trans
                                  &kp DOT  &kp N0  &kp MINUS            &trans  &trans  &trans
            >;
        };

        Func {
            bindings = <
&trans  &kp F12  &kp F7  &kp F8  &kp F9     &kp PRINTSCREEN    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F11  &kp F4  &kp F5  &kp F6     &kp SCROLLLOCK     &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F10  &kp F1  &kp F2  &kp F3     &kp PAUSE_BREAK    &trans  &trans  &trans  &trans  &trans  &trans
                         &mo 8   &kp SPACE  &kp TAB            &trans  &trans  &trans
            >;
        };

        Nav {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &kp K_REDO  &kp K_PASTE  &kp K_COPY  &kp K_CUT  &kp K_UNDO  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp LEFT    &kp DOWN     &kp UP      &kp RIGHT  &kp CAPS    &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp HOME    &kp PG_DN    &kp PG_UP   &kp END    &kp INSERT  &trans
                        &trans  &trans  &trans    &trans      &trans       &trans
            >;
        };

        Media {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans      &trans             &trans           &trans      &trans      &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp C_PREV  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_NEXT  &bt BT_CLR  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &BT_0       &BT_1              &BT_2            &BT_3       &BT_4       &trans
                        &trans  &trans  &trans    &kp C_STOP  &kp C_PLAY_PAUSE   &kp K_MUTE
            >;
        };

        Mouse {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &kp K_REDO      &kp K_PASTE     &kp K_COPY    &kp K_CUT        &kp K_UNDO  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &trans      &trans
&trans  &trans  &trans  &trans  &trans  &trans    &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &trans      &trans
                        &trans  &trans  &trans    &mkp MB2        &mkp MB1        &mkp MB3
            >;
        };

        Adjust {
            bindings = <
&trans  &bootloader        &trans  &tog 1  &tog 0  &trans    &trans  &trans  &trans  &trans  &trans             &trans
&trans  &ext_power EP_TOG  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &ext_power EP_TOG  &trans
&trans  &trans             &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans             &trans
                                   &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
